{"version":3,"sources":["requests.js","axios.js","Banner.js","Nav.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignupScreen.js","screens/LoginScreen.js","features/counter/userSlice.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["API_KEY","requests","fetchTrendingNow","fetchNetflixOriginals","fetchTopRated","fetchUpcoming","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","fetchPopular","instance","axios","create","baseURL","Banner","str","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","console","table","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","addEventListener","removeEventListener","onClick","push","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","poster_path","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","log","handleClick","id","videoId","opts","height","width","playerVars","autoplay","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","SignupScreen","emailRef","useRef","passwordRef","ref","type","placeholder","e","preventDefault","signInWithEmailAndPassword","current","value","authUser","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0cb7bd2.chunk.js","sourcesContent":["const API_KEY = \"9d51967612a919f190a3283ab484490a\";\r\n\r\nconst requests = {\r\n    fetchTrendingNow: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US&page=1`,\r\n    fetchUpcoming: `/movie/upcoming?api_key=${API_KEY}&language=en-US&page=1`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n    fetchPopular: `/movie/popular?api_key=${API_KEY}&language=en-US&page=1`,\r\n    \r\n};\r\n\r\nexport default requests;\r\n\r\n\r\n//","import axios from \"axios\";\r\n\r\n/** base url to make requets to the movie database */\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance;","import React, {useState, useEffect} from 'react';\r\nimport \"./Banner.css\";\r\nimport axios from './axios';\r\nimport requests from './requests';\r\n\r\nfunction Banner() {\r\n    const[movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length -1)\r\n            ]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    console.table(movie);\r\n\r\n    function truncate(str, n){\r\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\r\n    }\r\n    \r\n    return (\r\n    <header className = \"banner\" \r\n        style = {{\r\n            backgroundSize : \"cover\",\r\n            backgroundImage : `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backgroundPosition: \"center center\"\r\n        }}>\r\n            <div className=\"banner_contents\">\r\n            {/* title */}\r\n            <h1 className=\"banner_title\">\r\n                {movie?.title || movie?.name || movie?.original_name}\r\n            </h1>\r\n\r\n            {/* div > 2 buttons play and mylist*/}\r\n            <div className=\"banner_buttons\">\r\n                <button className=\"banner_button\">Play</button>\r\n                <button className=\"banner_button\">My List</button>\r\n            </div>\r\n             \r\n            {/* description */}\r\n            <h1 className=\"banner_description\">\r\n            {truncate(movie?.overview,150)} </h1> \r\n        </div>\r\n        <div className=\"banner_fadeBottom\"></div>\r\n    </header>\r\n    );\r\n}\r\n\r\nexport default Banner ;","import React, {useState, useEffect } from 'react';\r\nimport {useHistory } from \"react-router-dom\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n        const [show, handleShow] = useState(false);\r\n        const history =useHistory();\r\n    \r\n        const transitionNavBar = () => {\r\n        if (window.scrollY > 100) {\r\n            handleShow(true);\r\n          } else handleShow(false);\r\n        };\r\n    \r\n\r\n      useEffect(() => {\r\n        window.addEventListener(\"scroll\", transitionNavBar);\r\n        return() =>  window.removeEventListener(\"scroll\", transitionNavBar);\r\n      }, []);\r\n         \r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n           <div className=\"nav_contents\">\r\n           <img \r\n           onClick={() => history.push(\"/\")}\r\n           className=\"nav_logo\"\r\n            src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" \r\n            alt=\"VS Logo\" \r\n            />\r\n            <img \r\n            onClick={() => history.push(\"/profile\")}\r\n            className=\"nav_avatar\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" \r\n            alt=\"Profile\"\r\n            />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from './axios';\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({title, fetchUrl, isLargeRow = false}) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n    /** state i like a memory to store something.\r\n     * when we refresh it disappears.\r\n     * it is basically way to write variables in react\r\n     */\r\n\r\n    \r\n    // A snippet of code which runs based on a specific condition\r\n    useEffect(()=>{\r\n        // if [] , run once when row laods, and dont run again\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[fetchUrl]);\r\n    // we are using a variables which is being passed outside \r\n    // of the block so we will have to tell useeffect will know\r\n    // so useeffecgt know that something changed so it will have to refile the code \r\n \r\n    console.table(movies);\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars:{\r\n            // https://developers.google.com/youtube/player_parameters\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    /**useEffect(()=>{\r\n        // if [movies] , run when row laods, and run everytime when movies changes\r\n    },[movies]);\r\n    */\r\n    const handleClick = (movie) => {\r\n        if(trailerUrl){\r\n            setTrailerUrl(\"\");\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n            .then(url => {\r\n                \r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n            })\r\n            .catch(error => console.log(error));\r\n\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row_posters\">\r\n            { /* several row posters*/}\r\n\r\n            {movies.map(movie => (\r\n                ((isLargeRow && movie.poster_path) ||\r\n                (!isLargeRow && movie.backdrop_path)) && (\r\n                <img \r\n                key={movie.id}\r\n                onClick={() => handleClick(movie)}\r\n                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`} // String concatination\r\n                src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                alt={movie.name} />\r\n            ))\r\n\r\n            )}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react';\r\nimport \"./HomeScreen.css\";\r\nimport requests from '../requests';\r\nimport Banner from '../Banner';\r\nimport Nav from '../Nav';\r\nimport Row from '../Row';\r\n\r\nfunction HomeScreen() {\r\n    return (\r\n    <div className = \"homeScreen\">\r\n    {/*Nav-Bar */}\r\n      <Nav />\r\n \r\n    {/* Banner */}\r\n      <Banner />\r\n     \r\n     {/* Different Rows*/}\r\n     <Row \r\n        title=\"NETFLIX ORIGINALS\" \r\n        fetchUrl={requests.fetchNetflixOriginals}\r\n        isLargeRow = {true} // By default is it true so we can remove ={true}\r\n      />\r\n      \r\n      <Row  title=\"Trending Now\"  fetchUrl={requests.fetchTrendingNow}  />\r\n      <Row  title=\"Top Rated\"  fetchUrl={requests.fetchTopRated}  />\r\n      <Row  title=\"Popular Movies\"   fetchUrl={requests.fetchPopular}  />\r\n      <Row  title=\"Upcoming Movies\"   fetchUrl={requests.fetchUpcoming}  />\r\n      <Row  title=\"Action Movies\"   fetchUrl={requests.fetchActionMovies}  />\r\n      <Row  title=\"Comedy Movies\"   fetchUrl={requests.fetchComedyMovies}  />\r\n      <Row  title=\"Horror Movies\"   fetchUrl={requests.fetchHorrorMovies}  />\r\n      <Row  title=\"Romance Movies\"   fetchUrl={requests.fetchRomanceMovies}  />\r\n      <Row  title=\"Documentaries\"   fetchUrl={requests.fetchDocumentaries}  />\r\n\r\n\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default HomeScreen ;\r\n//require(HomeScreen).default; \r\n","import firebase from 'firebase';\r\n//import { db } from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAZ2y7_9bBKEMZW2gYkg-R5HM6VZY-ElOk\",\r\n  authDomain: \"final-project-c1dac.firebaseapp.com\",\r\n  projectId: \"final-project-c1dac\",\r\n  storageBucket: \"final-project-c1dac.appspot.com\",\r\n  messagingSenderId: \"1069810894175\",\r\n  appId: \"1:1069810894175:web:d4fcf9a391801e82e322ea\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\n\r\nexport {auth}\r\nexport default db;","import React,{ useRef } from 'react'\r\nimport {auth} from \"../firebase\";\r\nimport \"./SignupScreen.css\";\r\n\r\nfunction SignupScreen() {\r\n    const emailRef = useRef(null);\r\n    const passwordRef= useRef(null);\r\n\r\n    const register = (e) => {\r\n        e.preventDefault();\r\n\r\n        auth.createUserWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value,\r\n        ).then((authUser) =>{  \r\n            console.log(authUser);\r\n        })\r\n        .catch((error) => {\r\n            alert(error.message);\r\n        });\r\n    };\r\n\r\n    const signIn = (e) => {\r\n        e.preventDefault();\r\n\r\n        auth.signInWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value,\r\n        ).then((authUser) =>{  \r\n            console.log(authUser);\r\n        })\r\n        .catch((error) => {\r\n            alert(error.message);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"signupScreen\">\r\n            <form>\r\n                <h1>Sign In</h1>\r\n                    <input ref={emailRef} type=\"email\" placeholder=\"Email Address\"/>\r\n                    <input ref={passwordRef} type=\"password\" placeholder=\"Password\"/>\r\n                    <button type=\"submit\" onClick={signIn}>\r\n                         Sign In</button>\r\n                    <h4> \r\n                      <span className=\"signupScreen_gray\">  New to Netflix? </span>\r\n                      <span className=\"signupScreen_link\" onClick={register}> Sign Up now.</span>\r\n                    </h4>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignupScreen\r\n","import React ,{ useState } from 'react';\r\nimport \"./LoginScreen.css\";\r\nimport SignupScreen from './SignupScreen';\r\n\r\nfunction LoginScreen() {\r\nconst[signIn, setSignIn]= useState(false);\r\n\r\n    return (\r\n    <div className = \"loginScreen\">\r\n        <div className = \"loginScreen_background\">\r\n        <img \r\n            className=\"loginScreen_logo\"\r\n            src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" \r\n            alt=\"Login \"\r\n            />\r\n            <button onClick={() => setSignIn(true)}\r\n            className=\"loginScreen_button\">\r\n                Sign In\r\n            </button>\r\n            <div className = \"loginScreen_gradient\">\r\n            </div>\r\n\r\n            <div className = \"loginScreen_body\">\r\n                {signIn ? (\r\n                    <SignupScreen />\r\n                ):(\r\n                <>\r\n                <h1>Unlimited films, TV programmes and more</h1>\r\n                <h2>Watch anywhere. Cancel anytime</h2>\r\n                <h3>Ready to watch? Enter your email to create or restart your membership.</h3>\r\n               \r\n                <div className = \"loginScreen_input\">\r\n                    <form>\r\n                    <input type=\"email\" placeholder=\"Email Address\"/>\r\n                    <button \r\n                    onClick={() => setSignIn(true)}\r\n                    className=\"loginScreen_getStarted\">GET STARTED</button>\r\n                    </form>\r\n                </div>\r\n\r\n                </>\r\n                )}\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default LoginScreen ;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n//import { Action } from 'history';\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login:(state, action)=> {\r\n      state.user = action.payload;\r\n    },\r\n    logout:(state)=> {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\n\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React from 'react'\r\nimport \"./ProfileScreen.css\"\r\nimport Nav from \"../Nav\";\r\nimport { selectUser } from '../features/counter/userSlice';\r\nimport { auth } from '../firebase';\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction ProfileScreen() {\r\n    const user = useSelector(selectUser)\r\n\r\n    return (\r\n        <div className=\"profileScreen\">\r\n            <Nav />\r\n        <div className=\"profileScreen_body\">\r\n            <h1>Edit Profile</h1>\r\n            <div className=\"profileScreen_info\">\r\n            <img\r\n            src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n            alt=\"\"\r\n            />\r\n            <div className=\"profileScreen_details\">\r\n                <h2>{user.email}</h2>\r\n            <div className=\"profileScreen_plans\">\r\n                <h3>Plans</h3>\r\n                <button \r\n                onClick={() => auth.signOut()} \r\n                className=\"profileScreen_signOut\">\r\n                    Sign Out\r\n                </button>\r\n                \r\n            </div>    \r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileScreen\r\n","import React,{ useEffect  } from 'react';\r\nimport './App.css';\r\nimport HomeScreen from './screens/HomeScreen'; //<Rote exact path=\"/\">   Component\r\nimport {  Switch, Route } from 'react-router-dom';\r\n//import { Switch } from \"react-router\";  //BrowserRouter as Router,\r\nimport LoginScreen from './screens/LoginScreen';\r\nimport {auth} from \"./firebase\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectUser, login, logout} from \"./features/counter/userSlice\";\r\nimport ProfileScreen from './screens/ProfileScreen';\r\n\r\nfunction App() {\r\nconst user = useSelector(selectUser);\r\nconst dispatch = useDispatch();\r\n\r\nuseEffect(() => {\r\n  const unsubscribe = auth.onAuthStateChanged(\r\n    (userAuth) => {\r\n    if(userAuth){\r\n      //Logged in\r\n      console.log(userAuth);\r\n      dispatch(\r\n        login({\r\n        uid: userAuth.uid,\r\n        email: userAuth.email,\r\n      })\r\n      );\r\n    }else {\r\n       //logged out\r\n      dispatch(logout());\r\n     }\r\n      \r\n  });\r\n  return unsubscribe;\r\n}, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {/* <BrowserRouter> */}\r\n      {!user ? (\r\n        <LoginScreen />\r\n      ):(\r\n        <Switch>\r\n          <Route path=\"/profile\" >\r\n            <ProfileScreen />\r\n          </Route>\r\n          <Route exact path=\"/\" > \r\n            <HomeScreen />\r\n          </Route>\r\n          </Switch>\r\n      )\r\n    }\r\n    {/* </BrowserRouter> */}\r\n    </div>\r\n    \r\n  );\r\n}\r\n//component={HomeScreen}\r\nexport default App;\r\n//module.exports = App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/counter/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n//import { BrowserRouter as Router,Switch, Route, Link } from \"react-router-dom\";\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    \r\n    </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}